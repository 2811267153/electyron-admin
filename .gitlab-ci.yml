# This file is a template, and might need editing before it works on your project.
# This template uses the java:8 docker image because there isn't any
# official Gradle image at this moment
#

stages:
    - build
# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
#image: gradle:jdk8

#services:
#  - docker:docker

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
#variables:
#    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    
    

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
#before_script:
#    - chmod +x gradlew

# We redirect the gradle user home using -g so that it caches the
# wrapper and dependencies.
# https://docs.gradle.org/current/userguide/gradle_command_line.html
#
# Unfortunately it also caches the build output so
# cleaning removes reminants of any cached builds.
# The assemble task actually builds the project.
# If it fails here, the tests can't run.
#variables:
#  NPM_CONFIG_CACHE: npm_cache
#  NPM_CONFIG_REGISTRY: https://registry.npm.taobao.org
#  NPM_CONFIG_ELECTRON_MIRROR: https://npm.taobao.org/mirrors/electron
#  NPM_CONFIG_SASS_BINARY_SITE: https://npm.taobao.org/mirrors/node-sass
#  NPM_CONFIG_PHANTOMJS_CDNURL: https://npm.taobao.org/mirrors/phantomjs
#default:
#  cache:
#    paths:
#      - ${NPM_CONFIG_CACHE}
  
build:
  stage: build
  tags:  
    - jdk8
  script:
    - ssh root@123.60.212.9 'rm -rf /usr/share/nginx/html/dispatch-admin/*' && scp -r ./dist/* root@123.60.212.9:/usr/share/nginx/html/dispatch-admin/
  allow_failure: true

# Use the generated build output to run the tests.
#deploy:
#  stage: deploy
#  script:
#    - pwd
#    - ll
#    - cp   build/libs/*.jar /home/
# This file is a template, and might need editing before it works on your project.
# This template uses the java:8 docker image because there isn't any
# official Gradle image at this moment
#

stages:
    - build
# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
#image: gradle:jdk8

#services:
#  - docker:docker

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
#variables:
#    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    
    

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
#before_script:
#    - chmod +x gradlew

# We redirect the gradle user home using -g so that it caches the
# wrapper and dependencies.
# https://docs.gradle.org/current/userguide/gradle_command_line.html
#
# Unfortunately it also caches the build output so
# cleaning removes reminants of any cached builds.
# The assemble task actually builds the project.
# If it fails here, the tests can't run.
#variables:
#  NPM_CONFIG_CACHE: npm_cache
#  NPM_CONFIG_REGISTRY: https://registry.npm.taobao.org
#  NPM_CONFIG_ELECTRON_MIRROR: https://npm.taobao.org/mirrors/electron
#  NPM_CONFIG_SASS_BINARY_SITE: https://npm.taobao.org/mirrors/node-sass
#  NPM_CONFIG_PHANTOMJS_CDNURL: https://npm.taobao.org/mirrors/phantomjs
#default:
#  cache:
#    paths:
#      - ${NPM_CONFIG_CACHE}
  
#build:
#  stage: build
#  tags:  
#    - jdk8
#  script:
#    - ssh root@jm.shuweiapp.com 'rm -rf /www/wwwroot/jm.shuweiapp.com/*' && scp -r ./dist/* root@jm.shuweiapp.com:/www/wwwroot/jm.shuweiapp.com/
#  allow_failure: true

# Use the generated build output to run the tests.
#deploy:
#  stage: deploy
#  script:
#    - pwd
#    - ll
#    - cp   build/libs/*.jar /home/
